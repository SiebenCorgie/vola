/// A simple vola file that implements a sphere, translation, coloring and union/smooth_union.


#[derive(LocalLipshitz)]
entity Sphere(radius: real);
entity Box(extent: vec3);

concept SDF2D: vec2 -> real;
concept SDF3D: vec3 -> real;
concept Color: vec3 -> vec3;
concept MultiConcept: (vec3, s, vec3) -> vec3;


///Simple union operation
operation Union();


///Translation operation, with explicitly no identity implementation
#[define(no_identity)]
operation Translate(trans: vec3);
//SmoothUnion
operation SmoothUnion(suradius: real);
//Color overwrite operation
operation ColorOw(owcol: vec3);
operation Round(rad: real);

//Declares that we need the parameter `@` to define SDF3D of Sphere
impl Sphere for SDF3D(at){
     length(at) - radius
}

impl Sphere for Color(pos){
    [1.0, 1.0, 1.0]
}

impl Box for SDF3D(at){
     let q = abs(at) - extent;
     length(max(q, [0.0, 0.0, 0.0])) + min(max(q.x, max(q.y, q.z)), 0.0)
}

impl Box for Color(at){
    [0.0, at.x, extent.x]
}

//declares that `translate` takes a sub-expression and the
//field
impl Translate<sub> for SDF3D(at){
    at = at - trans;
    eval sub.SDF3D(at)
}

impl Translate<sub> for Color(p){
    eval sub.Color(p)
}

impl Union<l, r> for SDF3D(at) {
    let left = eval l.SDF3D(at);
    let right = eval r.SDF3D(at);
    let new_result = min(left, right);
    new_result
}

impl Union<l,r> for Color(at){
    let lcol = eval l.Color(at);
    let rcol = eval r.Color(at);
    min(lcol, rcol) - [0.2, 0.1, 0.4]
}

impl SmoothUnion<left, right> for SDF3D(at){
    let l = eval left.SDF3D(at);
    let r = eval right.SDF3D(at);
    let h = clamp( 0.5 + 0.5 * (r-l) / suradius, 0.0, 1.0);
    let dist = mix(l, r, h) * - suradius * h * (1.0 - h);
    dist
}

impl ColorOw<sub> for Color(at){
    let dist = eval sub.SDF3D(at);
    let color = [frac(dist), 1.0, 1.0];
    color
}


fn some_cube() -> csg{
    let some_mat = [
        [1.0, 1.0, 1.0],
        [2.0, 2.0, 2.0],
        [3.0, 4.0, 2.0]
    ];
    Box(some_mat.1)
}

//Some reusable field definition
fn subfield(trans: vec3) -> csg{
    csg sphere = Sphere(42.0);
    let somethin = 1.0;
    Union(){
        Translate(trans){
            sphere()
        }
    }{
        some_cube()
    }
}


//Export interface of the SDF
export fn myField(p: vec3, translation: vec3, some_lerp: real) -> (real, vec3){
    csg all_field = Union(){
        subfield(translation)
    }{
        Sphere(1.0)
    };

    (eval all_field.SDF3D(p), eval all_field.Color(p))
}
