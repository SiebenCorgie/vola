==================
alge add
==================

impl Test for Test{
    a + b
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (block
          (alge_expr
            (binary_expr
              (alge_expr
                (identifier))
              (alge_expr
                (identifier)))))))
==================
alge let
==================

impl Test for Test{
    let c = 3.0;
    c
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (float_literal
                (digit)
                (digit))))
          (alge_expr
            (identifier)))))


==================
alge left-associativity-binary
==================

impl Test for Test{
    let c = 3.0;
    3.0 + 3 + c
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (float_literal
                (digit)
                (digit))))
          (alge_expr
            (binary_expr
              (alge_expr
                (binary_expr
                  (alge_expr
                    (float_literal
                      (digit)
                      (digit)))
                  (alge_expr
                    (integer_literal
                      (digit)))))
              (alge_expr
                (identifier)))))))

==================
alge mul-before-additive
==================

impl Test for Test{
    let c = 3.0;
    3.0 * 3 + c
}

---

(source_file
      (impl_block
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (float_literal
                (digit)
                (digit))))
          (alge_expr
            (binary_expr
              (alge_expr
                (binary_expr
                  (alge_expr
                    (float_literal
                      (digit)
                      (digit)))
                  (alge_expr
                    (integer_literal
                      (digit)))))
              (alge_expr
                (identifier)))))))

==================
alge mul-before-additive reverse
==================

impl Test for Test{
    let c = 3.0;
    3.0 + 3 * c
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (float_literal
                (digit)
                (digit))))
          (alge_expr
            (binary_expr
              (alge_expr
                (float_literal
                  (digit)
                  (digit)))
              (alge_expr
                (binary_expr
                  (alge_expr
                    (integer_literal
                      (digit)))
                  (alge_expr
                    (identifier)))))))))
==================
alge braces
==================

impl Test for Test{
    let c = 3.0;
    (3.0 + 3) * c
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (float_literal
                (digit)
                (digit))))
          (alge_expr
            (binary_expr
              (alge_expr
                (alge_expr
                  (binary_expr
                    (alge_expr
                      (float_literal
                        (digit)
                        (digit)))
                    (alge_expr
                      (integer_literal
                        (digit))))))
              (alge_expr
                (identifier)))))))


==================
alge operation unary
==================

impl Test<sub> for Test{
    test
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (identifier)
        (block
          (alge_expr
            (identifier)))))

==================
alge operation binary
==================

impl Test<sub1, sub2> for Test{
    test
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (identifier)
        (identifier)
        (block
          (alge_expr
            (identifier)))))


==================
alge operation eval unary
==================

impl Test<sub> for Test{
    let a = eval sub();
    a
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (eval_expr
                (identifier))))
          (alge_expr
            (identifier)))))


==================
alge operation eval binary
==================

impl Test<sub1, sub2> for Test{
    let left = eval sub1();
    let right = eval sub2();
    left + right
}

---
(source_file
      (impl_block
        (identifier)
        (identifier)
        (identifier)
        (identifier)
        (block
          (let_stmt
            (identifier)
            (alge_expr
              (eval_expr
                (identifier))))
          (let_stmt
            (identifier)
            (alge_expr
              (eval_expr
                (identifier))))
          (alge_expr
            (binary_expr
              (alge_expr
                (identifier))
              (alge_expr
                (identifier)))))))
