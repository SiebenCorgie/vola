//BEGIN-CONFIG
//EXEC-FN:myfield
//EXEC-ARGS:0.0,0.0,0.0
//EXEC-EPS:0.1
//EXEC-RES:-2
//END-CONFIG
//

module super::std;


operation HyperOp();

impl HyperOp<sub> for SDF3D(at){
    csg t = Union(){
        sub
    }{
        Box([1.0; 3])
    };
    //Note compared to the simpler hypertree the offset counters the counters
    //the one in the myfield function, so the "big" sphere is at 0.0 again.
    let dist = eval t.SDF3D(at - [-1.0, 0.0, 0.0]);
    let sdist = eval sub.SDF3D(at);

    min(dist, sdist)
}


export fn myfield(at: vec3) -> real{
    csg t = HyperOp(){
        Translate([1.0, 0.0, 0.0]){
            Sphere(2.0)
        }
    };

    eval t.SDF3D(at)
}
