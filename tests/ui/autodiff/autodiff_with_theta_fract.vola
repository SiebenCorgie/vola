module super::std;

entity ThetaFractal();
impl ThetaFractal for SDF3D(at){
    let p = at;
    let w = 1.0;

    for i in 0..7{
        let modded = mod(p - [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]) - [1.0, 1.0, 1.0];
        p = [modded.x, modded.y, modded.z];
        p = p * (1.4 / dot(modded, modded));
    }

    length([p.x, p.z] / [w, w]) * 0.25
}


operation MyAdOp();
impl MyAdOp<sub> for SDF3D(at){
    let sd = eval sub.SDF3D(at);
    length(diff(sd, at))
}

export fn mysdf(at: vec3) -> real{
    csg sphere = MyAdOp(){ThetaFractal()};
    eval sphere.SDF3D(at)
}
