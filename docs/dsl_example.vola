// A simple example showing different features the language should support at some point.


//Defining a primitive. Untyped "prim". @ is used to refer to the global
//"evaluation coordinate". Attributes are given as arguments to the primitive. Types are resolved
// at inlining (if untyped), or, by definition.
prim sphere(radius){
    length(@ - radius)
}

//this sphere's radius must be a float.
prim another_sphere(radius: f32){
    length(@ - radius)
}


//this sphere's radius default radius is 5.0.
//could also be written as `radius: f32 = 5.0`
prim another_sphere(radius=5.0){
    length(@ - radius)
}


//a OP is characterized by the primitives it applies on (in <>), and
// its arguments (in `()`).
op union<a,b>(){
    min(a, b)
}

op translate<p>(offset){
    @ - offset
    p
}

//an op adding a color attribute
op color<p>(color: vec3){
    p.color = color;
    p
}


//A field is a combination of multiple primitives. Basically a tree of `op`s, where each leaf
// is a `prim`.
field my_test_field(){

    let another_tree = union<
        translate<sphere(10.0)>(50.0),
        translate<cube(2.0, 4.0, 10.0)>([4.0, 2.0, 8.0])
    >;

    let sub_tree_spheres = union<
        another_sphere,
        //You can open a scope anywhere...
        {
            translate<sphere(10.0)>(100.0)
        }
    >;



    //return subed tree

    sub<sub_tree_spheres, another_tree>
}
